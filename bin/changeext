#!/usr/bin/env node

var os = require('os');

var fs = require('fs');

var path = require('path');

var colors = require('colors');

var async = require('async');

colors.setTheme({
  error : 'red',
  success : 'green',
  info : 'yellow'
});

var exec = require('child_process').exec;

var spawn = require('child_process').spawn;

var argv = require("minimist")(process.argv.slice(2), {
  alias: {
    'input': 'i',
    'target': 't',
    'directory': 'd',
    'loop' : 'l',
    'random' : 'r',
    'encode' : 'e'
  },
  string: ['input', 'target','directory'],
  boolean : ['loop','random','encode'],
  'default': {
    'directory': process.cwd(),
    'encode' : false,
    'random' : false,
    'loop' : false
  }
});

if (argv.help) {
  console.log("Usage:".info);
  console.log("  changeext --help     // print help information".success);
  console.log("  changeext txt js     // change 'txt' to 'js' ".success);
  console.log("  changeext -i txt     // input file extensions".success);
  console.log("  changeext -t js      // target file extensions".success);
  console.log("  changeext -d /home/  // target directory for change".success);
  console.log("  changeext -l         // loop file directory for change file extensions".success);
  console.log("  changeext txt js -r  // get some random name");
  console.log("  changeext txt js -e // encode the file or decode,decode info is fixed with 0xff")
  process.exit(0);
}

function getRandom(){
  var counter = 0;
  return (function() {
      var guid = (+new Date()).toString( 32 ),i = 0;
      for ( ; i < 5; i++ ) {
          guid += Math.floor( Math.random() * 65535 ).toString( 32 );
      }
      return  guid + (counter++).toString( 32 );
  })();
}

function getFileList(folderPath,input,loop){
  var fileList = fs.readdirSync(folderPath);
  var rst = [];
  fileList.forEach(function(item){
    var absPath = path.join(folderPath,item);
    var stats = fs.statSync(absPath);
    var extname = path.extname(absPath);
    input = input == '' ? '' : (input.startsWith('.') ? input.toLowerCase() : ('.'+input).toLowerCase());
    if(loop && stats.isDirectory()){
      rst = rst.concat(getFileList(absPath,loop));
    }else if(extname.toLowerCase() == input){
      rst.push(absPath);
    }
  })
  return rst;
}
function renameFile(filePath,target,random,encode,cb){
  var name = path.basename(filePath);
  var extname = path.extname(filePath);
  var parentDir = path.dirname(filePath);
  target = target == '' ? '' : (target.startsWith('.') ? target.toLowerCase() : ('.'+target).toLowerCase());
  if(random){
    name = getRandom()+target;
  }else{
    name = name.replace(extname,'')+target;
  }
  var newPath = path.join(parentDir,name);
  if(encode){
    var buffer = fs.readFileSync(filePath);
    var newBuff = buffer.map(function(item){
      item = item ^ 0xff;
      return item;
    })
    
    fs.writeFileSync(newPath,newBuff);
    if(!extname.endsWith(target)){
      fs.unlinkSync(filePath);
    }
    console.log('Rename file : '+filePath.info +' => '+newPath.info+' success.'.success);  
    cb()
  }else{
    fs.rename(filePath,newPath,function(err){
      if(err){
        cb(err);
      }else{
        console.log('Rename file : '+filePath.info +' => '+newPath.info+' success.'.success);  
        cb();
      }
    });
  }
}
function rename (folderPath,input,target,loop,random,encode){
  var fileList = getFileList(folderPath,input,loop);
  async.mapLimit(fileList,50,function(item,cb){
    renameFile(item,target,random,encode,cb);
  },function(err,values){
    if(err){
      console.log(err);
    }
    process.exit(0);
  })
}

if(argv.directory && fs.existsSync(argv.directory)){

  //支持空后缀，如果不写则修改为空后缀
  if( null != argv.input && null != argv.target && undefined != argv.input && undefined != argv.target){

    rename(argv.directory,argv.input,argv.target,argv.loop,argv.random,argv.encode);

  }else{
    if(argv._[0] && argv._[1]){

      rename(argv.directory,argv._[0],argv._[1],argv.loop,argv.random,argv.encode);

    }else{

      console.log('input file extensions and target file extensions must be not empty.'.error);  
      process.exit(0);

    }
  }
}else{

  console.log('directory is not exists.'.error);
  process.exit(0);

}
